import React, {useState} from 'react';
import {useNavigate} from "react-router-dom";
import {useDispatch, useSelector} from "react-redux";
import Button from "../../components/UI/button/Button";
import {createPost} from "../../store/actions/postActions";
import UploadPostImageForm from "../../components/UI/upload-image-form/UploadPostImageForm";
import {setPostImageToDefault} from "../../store/reducers/postReducer";
import {DEFAULT_IMAGE_URL} from "../../config/url";
import {EditorState, convertToRaw} from 'draft-js'
import {Editor} from 'react-draft-wysiwyg'
import draftToHtml from 'draftjs-to-html'
import 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css'
import './createPostPage.scss'

const CreatePostPage = () => {
    const dispatch = useDispatch()
    const navigate = useNavigate()
    const {currentUser} = useSelector(state => state.user)
    let {postImageUrl} = useSelector(state => state.post)
    const [title, setTitle] = useState('')
    const [description, setDescription] = useState('')
    const [tags, setTags] = useState('')
    const [editorState, setEditorState] = useState(EditorState.createEmpty())

    function createPostHandler() {
        navigate('/')
        if (!postImageUrl) {
            postImageUrl = DEFAULT_IMAGE_URL
        }
        dispatch(createPost(
            {author: currentUser.name, title, description, tags: tags.split(' '),
                imageUrl: postImageUrl}
        ))
        dispatch(setPostImageToDefault())
    }

    return (
        <div className='wrapper'>
            <UploadPostImageForm/>
            <div className='mt-4 bg-white px-10 py-9 rounded-md'>
                <input
                    className='post__title'
                    type='text'
                    value={title}
                    placeholder='–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏...'
                    onChange={(e) => setTitle(e.target.value)}
                />
                <Editor
                    placeholder='–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç...'
                    editorState={editorState}
                    onEditorStateChange={newState => {
                        setEditorState(newState)
                        setDescription(draftToHtml(convertToRaw(newState.getCurrentContent())))
                    }}
                    toolbar={{
                        options: ['inline', 'blockType', 'fontSize', 'list', 'emoji'],
                        inline: {
                            inDropdown: false,
                            className: undefined,
                            component: undefined,
                            dropdownClassName: undefined,
                            options: ['bold', 'italic', 'underline', 'strikethrough', 'monospace', 'superscript', 'subscript'],
                        },
                        blockType: {
                            inDropdown: true,
                            options: ['Normal', 'H1', 'H2', 'H3', 'H4', 'H5', 'H6', 'Blockquote', 'Code'],
                            className: undefined,
                            component: undefined,
                            dropdownClassName: undefined,
                        },
                        fontSize: {
                            options: [8, 9, 10, 11, 12, 14, 16, 18, 24, 30, 36, 48, 60, 72, 96],
                            className: undefined,
                            component: undefined,
                            dropdownClassName: undefined,
                        },
                        fontFamily: {
                            options: ['Arial', 'Georgia', 'Impact', 'Tahoma', 'Times New Roman', 'Verdana'],
                            className: undefined,
                            component: undefined,
                            dropdownClassName: undefined,
                        },
                        list: {
                            inDropdown: false,
                            className: undefined,
                            component: undefined,
                            dropdownClassName: undefined,
                            options: ['unordered', 'ordered', 'indent', 'outdent'],
                        },
                        emoji: {
                            className: undefined,
                            component: undefined,
                            popupClassName: undefined,
                            emojis: [
                                'üòÄ', 'üòÅ', 'üòÇ', 'üòÉ', 'üòâ', 'üòã', 'üòé', 'üòç', 'üòó', 'ü§ó', 'ü§î', 'üò£', 'üò´', 'üò¥', 'üòå', 'ü§ì',
                                'üòõ', 'üòú', 'üò†', 'üòá', 'üò∑', 'üòà', 'üëª', 'üò∫', 'üò∏', 'üòπ', 'üòª', 'üòº', 'üòΩ', 'üôÄ', 'üôà',
                                'üôâ', 'üôä', 'üëº', 'üëÆ', 'üïµ', 'üíÇ', 'üë≥', 'üéÖ', 'üë∏', 'üë∞', 'üë≤', 'üôç', 'üôá', 'üö∂', 'üèÉ', 'üíÉ',
                                '‚õ∑', 'üèÇ', 'üèå', 'üèÑ', 'üö£', 'üèä', '‚õπ', 'üèã', 'üö¥', 'üë´', 'üí™', 'üëà', 'üëâ', 'üëâ', 'üëÜ', 'üñï',
                                'üëá', 'üññ', 'ü§ò', 'üñê', 'üëå', 'üëç', 'üëé', '‚úä', 'üëä', 'üëè', 'üôå', 'üôè', 'üêµ', 'üê∂', 'üêá', 'üê•',
                                'üê∏', 'üêå', 'üêõ', 'üêú', 'üêù', 'üçâ', 'üçÑ', 'üçî', 'üç§', 'üç®', 'üç™', 'üéÇ', 'üç∞', 'üçæ', 'üç∑', 'üç∏',
                                'üç∫', 'üåç', 'üöë', '‚è∞', 'üåô', 'üåù', 'üåû', '‚≠ê', 'üåü', 'üå†', 'üå®', 'üå©', '‚õÑ', 'üî•', 'üéÑ', 'üéà',
                                'üéâ', 'üéä', 'üéÅ', 'üéó', 'üèÄ', 'üèà', 'üé≤', 'üîá', 'üîà', 'üì£', 'üîî', 'üéµ', 'üé∑', 'üí∞', 'üñä', 'üìÖ',
                                '‚úÖ', '‚ùé', 'üíØ',
                            ],
                        }
                    }}
                />
                <input
                    className='post__tags'
                    type='text'
                    value={tags}
                    placeholder='–¢—ç–≥–∏'
                    onChange={(e) => setTags(e.target.value)}
                />
                <div className='flex items-center'>
                    <Button
                        className='post__btn'
                        onClick={() => createPostHandler()}
                    >
                        –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å
                    </Button>
                    <div className='post__cancel' onClick={() => navigate('/')}>
                        –û—Ç–º–µ–Ω–∞
                    </div>
                </div>
            </div>
        </div>
    );
};

export default CreatePostPage;